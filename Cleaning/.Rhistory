#-----------------------
#   Handling : Price
#-----------------------
# 1- column price as numeric :
# Keeping only digits (without "USD")
data$price <- str_extract(data$price, "(\\d+,?\\.?\\d+)")
# English numbers to Standard numbers (problem with the comma)
data$price <- gsub(pattern=",", replacement="", data$price)
# Conversion :
data$price <- as.numeric(data$price)
# 2- Price per unit :
# Creation of a new vector with the price per unit
price_per_unit <- c()
for(i in 1:length(data$quantity)) {
if(is.na(data[i,"quantity"])) {price_per_unit[i] <- data[i,"price"]}
else {price_per_unit[i] <- data[i,"price"]/data[i,"quantity"]}
}
#Insertion in the data frame
data$priceUnit <- price_per_unit
# 3- Price per unit per dose :
# Creation of a new vector with the price per unit per dose
price_unit_dose <- c()
for(i in 1:length(data$dose)) {
if(is.na(data[i,"dose"])) {price_unit_dose[i] <- data[i,"priceUnit"]}
else {price_unit_dose[i] <- data[i,"priceUnit"]/data[i,"dose"]}
}
#Insertion in the data frame
data$priceUnitDose <- price_unit_dose
return(data)
}
data <- ComputerReadable()
#-----------------------------------------------
#      Number of ads in the world
#-----------------------------------------------
NumberOfAds <- function() {
#Get rid of unwanted orign like Worldwide and Null which are not relevant
matching_vector <- c(  !str_detect(data$origin, "Worldwide") & !str_detect(data$origin, "NULL"))
sumup <- sort(summary(data[matching_vector, "origin"]), decreasing=TRUE)
#Bar plot with the total number ofs ads in each country
par(las=1)#display yaxis horizontally
par(mar=c(8,8,1,1)) #give space for yaxis
barp <- barplot(sumup[1:10], main="Number of ads in the World", xlim= c(0,max(sumup[1:10])+500), xlab="Number of ads",horiz = TRUE,  col = rainbow(10), cex.names = 0.8)
#ad numbers at the end of each bar
barp <- text(y = barp, x = sumup[1:10], label = sumup[1:10], pos=4 , cex = 0.8, col= "black")
}
NumberOfAds()
selectDrug <- function(drugName){
matching_vector <- c( (str_detect(data$category, drugName)))
return(matching_vector)
}
#-----------------------------------------------
#      Distribution of Drugs in the market
#-----------------------------------------------
DistributionDrugs <- function() {
#----------------------------
#   The most common drugs
#----------------------------
drugs <- c("Cocaine", "Meth", "LSD", "Opioids", "Cannabis", "Steroids", "Ecstasy", "Ketamine", "Heroin", "Shrooms", "Tobacco", "Benzos", "Paraphernalia")
freq <- c()
for(i in 1:length(drugs)){
matching_vector <- selectDrug(drugName =  drugs[i]);
sumup<-summary(matching_vector)
freq[i] <- sumup[3]
}
freq <- as.numeric(freq)
res <- data.frame(drugs, freq)
res <- res[order(res$freq, decreasing = TRUE),]
#----------------------
#     Pie Chart
#----------------------
# 1- Labels :
# Calculation in percentage
piepercent<- round(100*res$freq/sum(res$freq), 1)
# round(a,1) : one digit after the comma
lab <- c()
for(i in 1:length(piepercent)) {
lab[i] <- paste(piepercent[[i]], "%", sep=" ")
}
# 2- Title :
title <- "Distribution of drugs"
# 3- Colors :
c <- rainbow(length(piepercent))
# 4- Plot :
pie3D(piepercent,labels = lab,labelcex = 1, main = title ,col=c, theta = 0.9, explode = 0.04)
# 5- Legend :
legend(x=-2.2,y=-1.1,res$drugs, cex = 0.9, fill = c,ncol=5,border=NA, xpd=NA)
}
DistributionDrugs()
#---------------------------------------------
#    Number of ads of Drugs in the world
#---------------------------------------------
NumberOfAdsDrugs <- function(){
#Get rid of unwanted orign like Worldwide and Null which are not relevant
matching_vector <- c( str_detect(data$category, "Drugs") & !str_detect(data$origin, "Worldwide") & !str_detect(data$origin, "NULL"))
sumup <- sort(summary(data[matching_vector, "origin"]), decreasing=TRUE)
#Bar plot with the total number of ads of Drugs in each country
par(las=1)#display yaxis horizontally
par(mar=c(8,8,3,1)) #give space for yaxis
barp <- barplot(sumup[1:10], main="Number of ads of Drugs in the World", xlab="Number of ads",xlim = c(0,max(sumup[1:10]+500)),  col = rainbow(10), cex.names = 0.8, horiz = TRUE)
barp <- text(y = barp, x = sumup[1:10], label = sumup[1:10], pos=4 , cex = 0.8, col= "black")
}
NumberOfAdsDrugs()
MapEurope <- function() {
#Select the ads about drugs and get rid of the irrelevant orign Worlwide
matching_vector <- c( (str_detect(data$category, "Drugs") ) & !str_detect(data$origin, "Worldwide"))
sumup <- sort(summary(data[matching_vector, "origin"]), decreasing=TRUE)
#read a file containing the latitude and longitude of the "center" of each country
data_country <- read.csv("./Stats/lat_long.csv")
lat_long <- data.frame(Country = data_country$Country , long=  data_country$Longitude..average., lat=  data_country$Latitude..average.)
#Create a data.frame with the name of the country and its nb of ads
v <- data.frame(name= names(sumup) , amount = sumup)
#Merge v with lat_long in order to have a data with Country/NbofAds/lattitude/longitude
data_plot <- merge(v, lat_long,  by.x = "name", by.y = "Country" )
#Create a map of EUROPE with circles showing the amount of ads
map <- get_map(location = 'Europe', zoom =4 )
mapPoints <- ggmap(map)  + xlab("") + ylab("") + ggtitle("Number of ads of Drugs in the World")+
geom_point(data = data_plot,aes(x =long, y = lat, size =amount)) +scale_size_continuous(limits=c(0,3000),breaks=c(0,500,1000,1500,2000), range = c(0,14))
#Display
mapPoints
}
MapEurope()
#-----------------------------------------------
#   Importation / Exportation of a country
#-----------------------------------------------
country_Export <- function() {
#-------------------
#  Initialization
#-------------------
country <- "United Kingdom"
num <- 0
# Importation / Exportation :
if (num == 0) {
way <- "origin"
txt <- "- Exportation"
} else if (num == 1) {
way <- "destination"
txt <- "- Importation"
}
#------------------
#    Analysis
#------------------
# Country as destination
matching_vector <- str_detect(data[,way], country)
# list of the categories (among the line that have "Country" as origin)
# -> Products (categories) exporting by the country
country_cat <- data[matching_vector,"category"]
# Handling of this categories
# Regular expression for spliting the categories
regex <- "/(.*)/(.*)/(.*)"
cat <- str_match(country_cat, regex)
# Counting this categories
tab <- table(cat[,3])   #cat[,3] : 2nd category
tab <- sort(tab, decreasing = TRUE)  # Sorting (biggest in first)
tab <- tab[1:10] # Taking only the most important
#-----------------
#    Pie Chart
#-----------------
# 1- Labels :
# Calculation in percentage
piepercent<- round(100*tab/sum(tab), 1)
# round(a,1) : one digit after the comma
lab <- c()
for(i in 1:length(piepercent)) {
lab[i] <- paste(piepercent[[i]], "%", sep=" ")
}
# 2- Title :
title <- paste(country, txt, sep=" ")
# 3- Colors :
c <- rainbow(length(piepercent))
# 4- Plot :
pie3D(piepercent,labels = lab,labelcex = 1, main = title ,col=c, theta = 0.9, explode = 0.04)
# 5- Legend :
legend(x=-2.1,y=-1.1,names(piepercent), cex = 0.8, fill = c,ncol=4,border=NA, xpd=NA)
}
country_Export()
#-----------------------------------------------
#   Importation / Exportation of a country
#-----------------------------------------------
country_Export <- function() {
#-------------------
#  Initialization
#-------------------
country <- "China"
num <- 0
# Importation / Exportation :
if (num == 0) {
way <- "origin"
txt <- "- Exportation"
} else if (num == 1) {
way <- "destination"
txt <- "- Importation"
}
#------------------
#    Analysis
#------------------
# Country as destination
matching_vector <- str_detect(data[,way], country)
# list of the categories (among the line that have "Country" as origin)
# -> Products (categories) exporting by the country
country_cat <- data[matching_vector,"category"]
# Handling of this categories
# Regular expression for spliting the categories
regex <- "/(.*)/(.*)/(.*)"
cat <- str_match(country_cat, regex)
# Counting this categories
tab <- table(cat[,3])   #cat[,3] : 2nd category
tab <- sort(tab, decreasing = TRUE)  # Sorting (biggest in first)
tab <- tab[1:10] # Taking only the most important
#-----------------
#    Pie Chart
#-----------------
# 1- Labels :
# Calculation in percentage
piepercent<- round(100*tab/sum(tab), 1)
# round(a,1) : one digit after the comma
lab <- c()
for(i in 1:length(piepercent)) {
lab[i] <- paste(piepercent[[i]], "%", sep=" ")
}
# 2- Title :
title <- paste(country, txt, sep=" ")
# 3- Colors :
c <- rainbow(length(piepercent))
# 4- Plot :
pie3D(piepercent,labels = lab,labelcex = 1, main = title ,col=c, theta = 0.9, explode = 0.04)
# 5- Legend :
legend(x=-2.1,y=-1.1,names(piepercent), cex = 0.8, fill = c,ncol=4,border=NA, xpd=NA)
}
country_Export()
#-----------------------------------------------
#   Importation / Exportation of a country
#-----------------------------------------------
Country_Export_Import <- function() {
#-------------------
#  Initialization
#-------------------
country <- "France"
#---------------------------
#    Analysis - Exportation
#---------------------------
# Country as origin
matching_vector <- str_detect(data[,"origin"], country)
# list of the categories (among the line that have "Country" as origin)
# -> Products (categories) exporting by the country
country_cat <- data[matching_vector,"category"]
# Handling of this categories
# Regular expression for spliting the categories
regex <- "/(.*)/(.*)/(.*)"
cat <- str_match(country_cat, regex)
# Counting this categories
tab_exp <- table(cat[,3])   #cat[,3] : 2nd category
tab_exp <- sort(tab_exp, decreasing = TRUE)  # Sorting (biggest in first)
tab_exp <- tab_exp[1:10] # Taking only the most important
#---------------------------
#    Analysis - Importation
#---------------------------
# Country as destination
matching_vector <- str_detect(data[,"destination"], country)
# list of the categories (among the line that have "Country" as destination)
# -> Products (categories) importing by the country
country_cat <- data[matching_vector,"category"]
# Handling of this categories
# Regular expression for spliting the categories
regex <- "/(.*)/(.*)/(.*)"
cat <- str_match(country_cat, regex)
# Counting this categories
tab_imp <- table(cat[,3])   #cat[,3] : 2nd category
tab_imp <- sort(tab_imp, decreasing = TRUE)  # Sorting (biggest in first)
tab_imp <- tab_imp[1:10] # Taking only the most important
#-------------------------
#    Analysis - Fusion
#-------------------------
# Transformation in data frame
tab_exp <- as.data.frame(tab_exp)
tab_imp <- as.data.frame(tab_imp)
# Merger of the 2 data frame in order to have the same labels
tab <- merge(tab_exp,tab_imp,by.x="Var1",by.y="Var1",all = TRUE)
# Handling of the "NA" value (substitution by 0)
for (j in 2:3) {
for(i in 1:length(tab[,j])){
if(is.na(tab[i,j])) {tab[i,j] <-0}
}
}
#---------------------------
#    Pie Chart - Exporation
#---------------------------
# ploting 2 graphics om the same picture
par(mfrow = c(1,2))
# 1- Labels :
# Calculation in percentage
piepercent <- round(100*tab[,2]/sum(tab[,2]), 1)
# round(a,1) : one digit after the comma
lab <- c()
for(i in 1:length(piepercent)) {
if(piepercent[[i]] == 0) {lab[i] <- ""}
else {lab[i] <- paste(piepercent[[i]], "%", sep=" ")}
}
# 2- Colors :
c <- rainbow(length(tab[,1]))
# 3- Plot :
pie(piepercent,labels=lab,col=c)
mtext("Exportation",cex=1.1)
#---------------------------
#    Pie Chart - Importation
#---------------------------
# 1- Labels :
# Calculation in percentage
piepercent <- round(100*tab[,3]/sum(tab[,3]), 1)
# round(a,1) : one digit after the comma
lab <- c()
for(i in 1:length(piepercent)) {
if(piepercent[[i]] == 0) {lab[i] <- ""}
else {lab[i] <- paste(piepercent[[i]], "%", sep=" ")}
}
# 2- Plot :
pie(piepercent, labels=lab, col=c)
mtext("Importation",cex=1.1)
#------------------
#   General - Plot
#-----------------
par(oma=c(0,0,0.6,0))
title("France",outer=TRUE)
legend(x=-3.9,y=-1.1,tab[,1], cex = 0.8, fill=c,ncol=3,border=NA, xpd=NA)
}
Country_Export_Import()
DrugsPrices <- function() {
drugs <- c("Cocaine", "Meth", "Opioids", "Cannabis", "Steroids", "Ecstasy", "Ketamine", "Heroin",  "NBOME","Shrooms", "Tobacco", "Benzos", "Paraphernalia")
med <-c()
for(i in 1:length(drugs)){
matching_vector <- selectDrug(drugName =  drugs[i]);
med[i] <- median((data[matching_vector, "priceUnitDose"]))
}
priceDrugs <- data.frame(drugs, med);
priceDrugs$med <- round(priceDrugs$med,2)
priceDrugs <- priceDrugs[order(priceDrugs$med, decreasing=TRUE), ]
par(las=1)#display yaxis horizontally
par(mar=c(8,8,3,1)) #give space for yaxis
barp <- barplot(priceDrugs$med, main="Average Price of Drugs in the World", names.arg = priceDrugs$drugs, xlim = c(0,max(priceDrugs$med+100)),  xlab="Drugs", cex.names = 0.8, col =rainbow(length(priceDrugs$drugs)), horiz =TRUE)
barp <- text(y = barp, x = priceDrugs$med, label = paste(priceDrugs$med, " $", sep=""), pos=4 , cex = 0.8, col= "Black")
return (priceDrugs)
}
priceDrugs <- DrugsPrices()
#-----------------------------------------
#   Prices find on articles
#-----------------------------------------
DrugsPricesDoc <- function(){
cols <- c("Cocaine", "Meth", "Opioids",      "Cannabis"      , "Steroids", "Ecstasy", "Ketamine", "Heroin",  "NBOME","Shrooms", "Tobacco", "Benzos", "Paraphernalia" , "MDMA", "Amphetamine", "Crack", "LSD"   , "URL")
ref1  <- c(    35   ,   200  ,     NA   ,     (5.3 + 7.85)/2   ,    NA     ,     15   ,     25    ,    100   ,     NA  ,    NA   ,    NA    ,     NA  ,        NA      ,    40 ,   5         ,  NA    ,  NA     ,   "http://www.drugwise.org.uk/how-much-do-drugs-cost/")
ref2  <- c(    67   ,   NA   ,     NA   ,      51              ,    NA     ,     15   ,     32    ,    129   ,     NA  ,    NA   ,    NA    ,     NA  ,        NA      ,   51  ,   15        ,  97    ,  NA     , "http://www.telegraph.co.uk/news/uknews/crime/11346133/The-cost-of-street-drugs-in-Britain.html")
ref3  <- c(    110  ,   80   ,     NA   ,      NA              ,    NA     ,     NA   ,     NA    ,    170   ,     NA  ,    5.7  ,    NA    ,     NA  ,        NA      ,  150  ,   NA        ,   NA   ,  12000  ,   "http://www.rehabcenter.net/the-average-cost-of-illegal-drugs-on-the-street/ " )
ref4  <- c(    80   ,   109  ,     NA   ,      NA              ,    NA     ,   19.12  ,     NA    ,    91.16 ,     NA  ,    NA   ,    NA    ,     NA  ,        NA      ,    NA ,   NA        ,   NA   ,     NA  ,   " http://o.canada.com/business/interactive-what-illegal-drugs-cost-on-the-street-around-the-world")
ref5  <- c(     64  ,   NA   ,     NA   ,      NA              ,    NA     ,     20   ,     NA    ,    NA    ,     NA  ,    NA   ,    NA    ,     NA  ,        NA      ,    NA ,   NA        ,  NA    ,   NA    , " http://www.thestudentpocketguide.com/2012/01/student-life/health-and-relationships/facts-about-drugs/")
doc_drugs <- t(data.frame(ref1, ref2, ref3, ref4, ref5))
colnames(doc_drugs) <- cols
#calculate the mean price of each drugs find on articles
price_doc <- c()
for(i in 1 : length(cols)){
price_doc[i] <- summary(as.numeric(doc_drugs[,i]))[[4]]
}
price_doc.data <- data.frame(cols, price_doc)
#merge the previous dataframe which correspond to the mean price of each drugs in the data
# with the dataframe created above
beside_plot <- merge(price_doc.data, priceDrugs, by.x ="cols", by.y ="drugs")
rownames(beside_plot) <- beside_plot[,1]
beside_plot <- beside_plot[,-1]
#Creating the barplot
par(las=1)#display yaxis horizontally
par(mar=c(8,8,4,1)) #give space for yaxis
b <- barplot(rbind(beside_plot[,1], beside_plot[,2]), main="Average price of Drugs", xlim = c(0, 400),
xlab="Price of Drugs", beside=TRUE, names.arg = rownames(beside_plot), col=1:2, horiz = TRUE, space = c(0,0.4), cex.names = 0.8)
axis(side=1,at=c(50,150,250,350),labels=c(50,150,250,350))
lab <- c("Street", "AlphaBay")
legend("topright",lab,fill=1:2, cex=0.8)
}
DrugsPricesDoc()
#--------------------------------------------------------
#       Association Rules - Apriori algorithm
#     Guess if this dealer is selling this drugs
#--------------------------------------------------------
AssoRSellersCat <- function(){
#------------------------------
#  New Data frame for analysis
#------------------------------
#Select all ads of "Drugs & Chemicals"
matching_vector <- c( str_detect(data$category, "Drugs & Chemicals"))
data_drugs <- data[matching_vector, ]
data_drugs$category <- gsub("/Drugs & Chemicals/", "", data_drugs$category)
#List all the sellers
sellers <-summary(data_drugs$seller)
sellers <- sellers[ sellers != "Null"]
#List all categories concerning drugs
list_category <- table(data_drugs[,"category"])
list_cat_drugs <- list_category [ list_category != 0 ]
#Step 1 : initialise a data.frame with the information of the first seller
#Select all categories of the seller
matching_vector <- c( str_detect(data$seller, names(sellers)[1]))
cat_seller <-summary(data.frame(data[matching_vector, "category"]))
#Loop which creates a boolean vector which tells if the seller sells stuffs in each category
bool_cat <-c()
bool_vec <-c()
for( i in 1: length(list_cat_drugs)){
bool_vec <- str_detect(cat_seller, names(list_cat_drugs)[i])
bool <- FALSE
for(j in 1:length(bool_vec)){
bool <- bool || bool_vec[j]
}
bool_cat[i] <- bool
}
cat_seller.data <- t(data.frame(bool_cat))
colnames(cat_seller.data) <- names(list_cat_drugs)
#Step 2 : Do the same for the other sellers
for(k in 2 : length(sellers)){
#Select all categories of the seller
matching_vector <- c( str_detect(data$seller, names(sellers)[k]))
cat_seller <-summary(data.frame(data[matching_vector, "category"]))
#Loop which creates a boolean vector which tells if the seller sells stuffs in each category
bool_cat <-c()
bool_vec <-c()
for( i in 1: length(list_cat_drugs)){
bool_vec <- str_detect(cat_seller, names(list_cat_drugs)[i])
bool <- FALSE
for(j in 1:length(bool_vec)){
bool <- bool || bool_vec[j]
}
bool_cat[i] <- bool
}
cat_seller.data <- rbind(cat_seller.data,bool_cat)
}
rownames(cat_seller.data)<- names(sellers)
#-------------------------
#      Ass Rules
#-------------------------
#Association Rules with rhs containing "Stimulants/Cocaine" only
rules <- apriori(cat_seller.data,
parameter = list(minlen=3, supp=0.02, conf=0.7),
appearance = list(rhs=c("Ecstasy/MDMA"),default="lhs"),
control = list(verbose=F))
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted[1:10])
}
AssoRSellersCat()
#----------------------------------------------------------
#                       Library :
#----------------------------------------------------------
#install.packages("stringr")
#install.packages("units")
#install.packages("ggmap")
#install.packages("plotrix")
#install.packages("arules")
#install.packages("arulesViz")
library(stringr)
library(units)
library(ggmap)
library(plotrix)
library(arules)
library(arulesViz)
setwd("C:/BDP")
source('C:/BDP/UEL-project/DataMining/Decision tree/Seller/DTsellerV2.R')
source('C:/BDP/UEL-project/DataMining/Decision tree/Seller/DTsellerV2.R')
215/2
#----------------------------------------------------------
#                       Library :
#----------------------------------------------------------
#install.packages("stringr")
#install.packages("units")
#install.packages("ggmap")
#install.packages("plotrix")
#install.packages("arules")
#install.packages("arulesViz")
#install.packages("e1071")
# Mamipulation string
library(stringr)
# Using unit
library(units)
# Plot a map
library(ggmap)
library(plotrix)
# Association rules
library(arules)
library(arulesViz)
# Bayesian classification, naive algorithm
library(e1071)
install.packages("e1071")
#----------------------------------------------------------
#                       Library :
#----------------------------------------------------------
#install.packages("stringr")
#install.packages("units")
#install.packages("ggmap")
#install.packages("plotrix")
#install.packages("arules")
#install.packages("arulesViz")
#install.packages("e1071")
# Mamipulation string
library(stringr)
# Using unit
library(units)
# Plot a map
library(ggmap)
library(plotrix)
# Association rules
library(arules)
library(arulesViz)
# Bayesian classification, naive algorithm
library(e1071)
setwd("C:/BDP")
setwd("C:/BDP")
setwd("C:/BDP")
source('C:/BDP/UEL-project/Cleaning/Main.R')
setwd("C:/BDP/UEL-project/Cleaning")
source('C:/BDP/UEL-project/Cleaning/Main.R')
source('C:/BDP/UEL-project/Cleaning/Main.R')
